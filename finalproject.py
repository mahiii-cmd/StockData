# -*- coding: utf-8 -*-
"""finalProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19aH1mQnDYLd8H2IHXsrOe2OjslKO5XrN

**Loading CSV**
"""

import pandas as pd


# Load the dataset from the uploaded file
file_path = '/content/drive/MyDrive/stockdata.csv'
# dataset = pd.read_csv('stockdata.csv')
dataset = pd.read_csv(file_path)
# Display the first few rows of the dataset to understand its structure
dataset.head()

"""**Missing Values**"""

# Check for missing values in the dataset
missing_values = dataset.isnull().sum()
missing_values

"""


**Handle Missing values**"""

import pandas as pd
# Load the CSV file
df = pd.read_csv('/content/drive/MyDrive/stockdata.csv')
# Check missing values before handling
print("Missing Values (Before):")
print(df.isnull().sum())
# Fill all missing values with 0
df.fillna(0, inplace=True)
# Check missing values after handling
print("\nMissing Values (After):")
print(df.isnull().sum())
# Display the first few rows of the updated dataset
print("\nUpdated Dataset Preview:")
print(df.head())

"""**Data Encoding / One Hot Encoding / Normalization**"""

from sklearn.preprocessing import LabelEncoder

# Label Encoding
label_encoder = LabelEncoder()
dataset['Date_encoded'] = label_encoder.fit_transform(dataset['Date'])

from sklearn.preprocessing import OneHotEncoder
Hot_dataset_encoded = pd.get_dummies(dataset, columns=['Date'])

# Display the transformed dataset with One-Hot Encoding
Hot_dataset_encoded.head()

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
numerical_columns = ['MSFT', 'IBM', 'SBUX', 'AAPL', 'GSPC']
dataset[numerical_columns] = scaler.fit_transform(dataset[numerical_columns])

# Display the transformed dataset
dataset.head()

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error, r2_score

X = dataset[['MSFT', 'IBM', 'SBUX', 'AAPL', 'Date_encoded']]
y = dataset['GSPC']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""**Applying KNN**"""

# Apply KNN Regression
knn = KNeighborsRegressor(n_neighbors=5)
knn.fit(X_train, y_train)

# Make predictions
y_pred = knn.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

"""**Result**"""

print('Mean Squared Error:', mse, ',R2 Score:', r2)

"""**Plotly**"""

import plotly.express as px

fig1 = px.line(dataset, x='Date', y='MSFT', title='MSFT Stock Prices Over Time', labels={'MSFT': 'Stock Price', 'Date': 'Date'})
fig1.show()

fig2 = px.scatter(dataset, x='AAPL', y='GSPC', title='AAPL vs GSPC Relationship', labels={'AAPL': 'AAPL Stock Price', 'GSPC': 'GSPC Index'})
fig2.show()

!pip install streamlit pyngrok

import streamlit as st

# Display the logo at the top of the sidebar
st.sidebar.image(
    "/content/drive/MyDrive/Colab Notebooks/LOGO.png",  # Path to your logo file
    use_column_width=True  # Adjust to fit the sidebar width
)

# Add optional sidebar title or content
st.sidebar.title("Dashboard Title")
st.sidebar.write("Welcome to the Streamlit Dashboard!")

from pyngrok import ngrok #secure tunnel create
# Set your Ngrok authtoken
ngrok.set_auth_token("2sCt9wQ3wnM4wNpTu3iQgq7eIBD_39xRwYq2sCK8myyi5ukEa")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import pandas as pd
# import streamlit as st
# import plotly.express as px
# 
# # Load and preprocess stock data
# df = pd.read_csv('/content/drive/MyDrive/stockdata.csv')
# df['Date'] = pd.to_datetime(df['Date'])  # Convert 'Date' column to datetime
# 
# # Logo
# st.sidebar.image("/content/drive/MyDrive/Black & Blue Minimalist Modern Initial Font Logo_20250129_022544_0000.png", width=200)
# st.sidebar.write("Welcome to the Streamlit Dashboard!")
# 
# st.sidebar.title("Stock Price")
# st.sidebar.write("Welcome to the Stock Price Dashboard!")
# 
# # Streamlit app title and data display
# st.title("Stock Data Analysis")
# st.write(df.head())
# 
# # Plot stock closing prices over time
# st.subheader("Stock Closing Prices Over Time")
# fig = px.line(df, x='AAPL', y='SBUX', title="Stock Closing Prices Over Time")
# st.plotly_chart(fig)
# 
# # Plot stock closing prices over time
# st.subheader("Stock Closing Prices Over Time")
# fig = px.line(df, x='GSPC', y='IBM', title="Stock Closing Prices Over Time")
# st.plotly_chart(fig)
# 
# # Plot stock volume over time (if available)
# if 'MSFT' in df.columns:
#     st.subheader("Stock Volume Over Time")
#     fig_vol = px.line(df, x='IBM', y='MSFT', title="Stock Volume Over Time")
#     st.plotly_chart(fig_vol)
# else:
#     st.write("Column 'Volume' not found in the data.")
#

!streamlit run app.py &>/dev/null &
from pyngrok import ngrok
public_url = ngrok.connect(addr=8501, bind_tls=True)
print(f"Streamlit is running at:Â {public_url}")